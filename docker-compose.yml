services:
  api-gateway:
    build: ${API_GATEWAY_DOCKERFILE_PATH}
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
    env_file:
      - envs/microservice/api-gateway.env
      - envs/common.env
    depends_on:
      user-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "sh", "-c", "ping -c 1 localhost >/dev/null && echo 'Service is alive' || exit 1" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 20s
    networks:
      - microservices-network

  react-frontend:
    build: ${REACT_FRONTEND_DOCKERFILE_PATH}
    ports:
      - "${REACT_FRONTEND_PORT}:80"
    env_file:
      - envs/common.env
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - microservices-network

  payment-service:
    build: ${PAYMENT_SERVICE_DOCKERFILE_PATH}
    ports:
      - "${PAYMENT_SERVICE_PORT}:${PAYMENT_SERVICE_PORT}"
    env_file:
      - /envs/common.env
      - /envs/mongo/mongodb.env
      - /envs/messageBroker/kafka.env
      - /envs/microservice/payment-service.env
    environment:
      - SPRING_APPLICATION_PORT=${PAYMENT_SERVICE_PORT}
    depends_on:
      mongodb:
        condition: service_healthy
      kafka-gateway:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "sh", "-c", "ping -c 1 localhost >/dev/null && echo 'Service is alive' || exit 1" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 20s
    networks:
      - microservices-network

  user-service:
    build: ${USER_SERVICE_DOCKERFILE_PATH}
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    env_file:
      - /envs/mysql/userdb.env
      - /envs/nosql/redis/redis.env
      - /envs/microservice/user-service.env
    environment:
      - SPRING_APPLICATION_PORT=${USER_SERVICE_PORT}
    depends_on:
      user-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "ping -c 1 localhost >/dev/null && echo 'Service is alive' || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 20s
    networks:
      - microservices-network

  auth-service:
    build: ${AUTHENTICATION_SERVICE_DOCKERFILE_PATH}
    ports:
      - "${AUTHENTICATION_SERVICE_PORT}:${AUTHENTICATION_SERVICE_PORT}"
    env_file:
      - envs/mysql/authdb.env
      - envs/microservice/auth-service.env
    environment:
      - SPRING_APPLICATION_PORT=${AUTHENTICATION_SERVICE_PORT}
    depends_on:
      auth-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "ping -c 1 localhost >/dev/null && echo 'Service is alive' || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 20s
    networks:
      - microservices-network

  order-service:
    build: ${ORDER_SERVICE_DOCKERFILE_PATH}
    ports:
      - "${ORDER_SERVICE_PORT}:${ORDER_SERVICE_PORT}"
    env_file:
      - envs/common.env
      - envs/microservice/order-service.env
      - envs/mysql/orderdb.env
      - envs/messageBroker/kafka.env
    environment:
      - SPRING_APPLICATION_PORT=${ORDER_SERVICE_PORT}
    depends_on:
      order-db:
        condition: service_healthy
      kafka-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "ping -c 1 localhost >/dev/null && echo 'Service is alive' || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 20s
    networks:
      - microservices-network

  user-db:
    ports:
      - "3306:3306"
    image: mysql:8.0
    env_file:
      - envs/mysql/userdb.env
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 30s
    networks:
      - microservices-network
    volumes:
      - userdb_data:/var/lib/mysql

  auth-db:
    ports:
      - "3307:3306"
    container_name: auth-db
    image: mysql:8.0
    env_file:
      - envs/mysql/authdb.env
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 30s
    networks:
      - microservices-network
    volumes:
      - authdb_data:/var/lib/mysql

  order-db:
    ports:
      - "3308:3306"
    container_name: order-db
    image: mysql:8.0
    env_file:
      - envs/mysql/orderdb.env
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 30s
    networks:
      - microservices-network
    volumes:
      - orderdb_data:/var/lib/mysql

  redis:
    image: redis:7-alpine
    env_file:
      - envs/nosql/redis/redis.env
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network
    volumes:
      - redis_data:/data

  mongodb:
    image: mongo:latest
    env_file:
      - envs/mongo/mongodb.env
    ports:
      - "${MONGO_INITDB_DATABASE_PORT}:${MONGO_INITDB_DATABASE_PORT}"
    healthcheck:
      test: >
        bash -c "mongosh -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval 'db.adminCommand(\"ping\")'"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - microservices-network

  kafka-gateway:
    image: bitnami/kafka:latest
    container_name: kafka-gateway
    ports:
      - "${KAFKA_PLAINTEXT_PORT}:${KAFKA_PLAINTEXT_PORT}"
      - "${KAFKA_PLAINTEXT_HOST_PORT}:${KAFKA_PLAINTEXT_HOST_PORT}"
    env_file:
      - envs/messageBroker/kafka.env
    environment:
      - KAFKA_PLAINTEXT_PORT=${KAFKA_PLAINTEXT_PORT}
      - KAFKA_PLAINTEXT_HOST_PORT=${KAFKA_PLAINTEXT_HOST_PORT}
      - KAFKA_CONTROLLER_PORT=${KAFKA_CONTROLLER_PORT}
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:${KAFKA_PLAINTEXT_PORT} --list || exit 1" ]
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - microservices-network

networks:
  microservices-network:
    name: microservices-network
    driver: bridge

volumes:
  userdb_data:
  authdb_data:
  orderdb_data:
  redis_data:
  kafka_data: